{% set vmName       = env['deployment'] + "-vm" %}
{% set zone         = "us-central1-a" %}
{% set machineType  = "n1-standard-1" %}

# As of Google NEXT announcement, we use neo4j-test-drive2 family,
# which includes DNS/SSL configuration and other version updates.
{% set imageFamily  = "neo4j-test-drive2" %}

{% set waiterName   = env["deployment"] + "-startup-waiter" %}
{% set configName   = env["deployment"] + "-startup-config" %}

resources:
- name: generated-password
  type: password.py
  properties:
    length: 16
    includeSymbols: false

- name: {{ vmName }}
  type: compute.v1.instance
  properties:
    zone: {{ zone }}
    machineType: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/zones/{{ zone }}/machineTypes/{{ machineType }}
    tags:
      items:
      - neo4j
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/global/images/family/{{ imageFamily }}
    networkInterfaces:
    - network: global/networks/default
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    serviceAccounts:
    - email: default
      scopes:
        - https://www.googleapis.com/auth/cloudruntimeconfig
        - https://www.googleapis.com/auth/logging.write
    metadata:
      items:
        - key: test-drive-password
          value: $(ref.generated-password.password)
        - key: startup-script
          value: |
            #!/bin/bash
            # Leave non-sensitive breadcrumbs in /tmp/vmconfig.txt,
            # just so if things go wrong we can debug.
            hostname=$(curl -X POST -H 'X-Api-Key: CfaZwE3RGk28F6jhoPQYW7sV1FZ0uFiI4BWF2Ik4' 'https://ydfsrlbp9i.execute-api.us-east-1.amazonaws.com/prod')
            sudo systemctl stop neo4j
            echo "Hostname is $hostname" | tee -a /tmp/vmconfig.txt

            # Update config with hostname taken from Ryan's stuff.
            cat /etc/neo4j/neo4j.orig | sudo sed 's|dbms.connectors.default_advertised_address=.*|dbms.connectors.default_advertised_address='${hostname}'|' > /etc/neo4j/neo4j.conf
            sudo systemctl start neo4j

            externalIp=$(curl -s -H "Metadata-Flavor: Google" \
            http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip)

            while true; do
              # Loop waiting for neo4j service to start.
              if curl -s -I http://$externalIp:7474 | grep "200 OK"; then
                echo "Neo4j is up; changing default password" 2>&1 | tee -a /tmp/vmconfig.txt

                # Change default password.
                curl -v -H "Content-Type: application/json" \
                     -XPOST -d '{"password":"$(ref.generated-password.password)"}' \
                     -u neo4j:testdrive \
                     http://$externalIp:7474/user/neo4j/password 2>&1 | tee -a /tmp/vmconfig.txt
                
                echo "Done - we're ready to roll" 2>&1 | tee -a /tmp/vmconfig.txt
                break
              fi

              echo "Waiting for neo4j to come up..." 2>&1 | tee -a /tmp/vmconfig.txt
              sleep 1
            done

            gcloud config get-value account 2>&1 | tee -a /tmp/vmconfig.txt

            # Signal back to deployment manager template the hostname of this VM.
            gcloud beta runtime-config configs variables set hostname "$hostname" \
            --config-name {{ configName }} --is-text 2>&1 | tee -a /tmp/vmconfig.txt

            # Report successful configuration of the instance so the deployment terminates
            gcloud beta runtime-config configs variables set success/success \
            "$hostname" --config-name {{ configName }} 2>&1 | tee -a /tmp/vmconfig.txt
            echo "Finished configuration process" | tee -a /tmp/vmconfig.txt

- type: runtimeconfig.v1beta1.config
  name: {{ configName }}
  properties:
    config: {{ configName }}

- type: runtimeconfig.v1beta1.waiter
  name: {{ waiterName }}
  metadata:
    dependsOn:
    - {{ vmName }}
  properties:
    parent: $(ref.{{ configName }}.name)
    waiter: {{ waiterName }}
    timeout: 600s
    success:
      cardinality:
        path: /success
        number: 1
    failure:
      cardinality:
        path: /failure
        number: 1

# This stores the hostname reported back by VM startup script.
# Note that it must depend on the waiter.
- name: hostname
  type: runtimeconfig.v1beta1.variable
  properties:
    parent: $(ref.{{ configName }}.name)
    variable: hostname
  metadata:
    dependsOn:
    - {{ waiterName }}

# Note on machine hostname!  After the VM is set up, you can access IP by
# $(ref.{{ vmName }}.networkInterfaces[0].accessConfigs[0].natIP)
# Given an IP address of X.Y.Z.A, the hostname will end up being:
# X-Y-Z-A.gcp-neo4j-sandbox.com
outputs:
- name: url
  value: https://$(ref.hostname.text):7473/
- name: username
  value: neo4j
- name: password
  value: $(ref.generated-password.password)